from cryptography.fernet import Fernet

class PasswordManager:
    def __init__(self, key_file='key.key'):
        self.key_file = key_file
        self.load_key()

    def load_key(self):
        try:
            with open(self.key_file, 'rb') as key_file:
                self.key = key_file.read()
        except FileNotFoundError:
            self.key = Fernet.generate_key()
            with open(self.key_file, 'wb') as key_file:
                key_file.write(self.key)


    def encrypt_password(self, password):
        cipher = Fernet(self.key)
        encrypted_password = cipher.encrypt(password.encode())
        return encrypted_password

    def decrypt_password(self, encrypted_password):
        cipher = Fernet(self.key)
        decrypted_password = cipher.decrypt(encrypted_password).decode()
        return decrypted_password

# Example usage
password_manager = PasswordManager()

# Encrypt and store a password
user_password = "super_secure_password"
encrypted_password = password_manager.encrypt_password(user_password)
print(f"Encrypted Password: {encrypted_password}")

# Decrypt and retrieve the password
decrypted_password = password_manager.decrypt_password(encrypted_password)
print(f"Decrypted Password: {decrypted_password}")
